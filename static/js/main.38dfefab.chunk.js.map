{"version":3,"sources":["components/ContinentContex.ts","components/LanguageInfo.tsx","components/CountryInfo.tsx","components/ContinentInfo.tsx","api/api.ts","App.tsx","index.tsx"],"names":["ContinentContex","React","createContext","isSelectedContinent","setIsSelectedContinent","LanguageInfo","props","key","language","useContext","className","type","onClick","name","CountryInfo","country","useState","isSelectedCountry","setIsSelectedCountry","languages","map","ContinentInfo","continent","value","Provider","countries","client","ApolloClient","uri","cache","InMemoryCache","GET_ALL_CONTINENTS","gql","App","useQuery","loading","error","data","continents","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"uOAGaA,EAAkBC,IAAMC,cAAuB,CAC1DC,qBAAqB,EACrBC,uBAAwB,kBAAM,K,OCGnBC,EAAgC,SAACC,GAC5C,IAAQC,EAAkBD,EAAlBC,IAAKC,EAAaF,EAAbE,SACb,EAAwDC,qBAAWT,GAA3DG,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,uBAE7B,OACE,oBACEM,UAAU,kBADZ,SAIE,wBACEC,KAAK,SACLD,UAAU,yCACVE,QAAS,WACPR,GAAwBD,IAJ5B,SAOGK,EAASK,QATPN,ICPEO,EAA+B,SAACR,GAC3C,IAAQC,EAAiBD,EAAjBC,IAAKQ,EAAYT,EAAZS,QACb,EAAkDC,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KAMA,OACE,qBACER,UAAU,kBADZ,UAIE,wBACEC,KAAK,SACLD,UAAU,yCACVE,QAZc,WAClBM,GAAsBD,IAQpB,SAKGF,EAAQF,OAGX,6BACGI,GACCF,EAAQI,UAAUC,KAAI,SAAAZ,GAAQ,OAC9B,cAAC,EAAD,CAEEA,SAAUA,GADLA,EAASK,aAdfN,ICVEc,EAAiC,SAACf,GAC7C,IAAQC,EAAmBD,EAAnBC,IAAKe,EAAchB,EAAdgB,UACb,EAAsDN,oBAAS,GAA/D,mBAAOb,EAAP,KAA4BC,EAA5B,KAMMmB,EAAQ,CACZpB,sBACAC,0BAGF,OACE,cAACJ,EAAgBwB,SAAjB,CAA0BD,MAAOA,EAAjC,SACE,qBACEb,UAAU,kBADZ,UAIE,wBACEC,KAAK,SACLD,UAAU,yCACVE,QAlBY,WAClBR,GAAwBD,IAcpB,SAKGmB,EAAUT,OAGb,oBAAIH,UAAU,aAAd,SACGP,GACCmB,EAAUG,UAAUL,KAAI,SAAAL,GAAO,OAC7B,cAAC,EAAD,CAEEA,QAASA,GADJA,EAAQF,aAdhBN,M,gDCpBAmB,EAAS,IAAIC,IAAa,CACrCC,IAAK,qCACLC,MAAO,IAAIC,MAGAC,EAAqBC,YAAH,2KCiBhBC,EArBO,WACpB,MAAiCC,YAASH,GAAlCI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,EAAgB,2CAChBC,EAAc,yCAGhB,qBAAK1B,UAAU,MAAf,SACE,oBAAIA,UAAU,aAAd,SACG2B,EAAKC,WAAWlB,KAAI,SAACE,GAAD,OACnB,cAAC,EAAD,CAEEA,UAAWA,GADNA,EAAUT,c,QCV3B0B,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBf,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFgB,SAASC,eAAe,W","file":"static/js/main.38dfefab.chunk.js","sourcesContent":["import React from \"react\";\nimport { Context } from \"vm\";\n\nexport const ContinentContex = React.createContext<Context>({\n  isSelectedContinent: false,\n  setIsSelectedContinent: () => false,\n});\n","import React, { useContext } from \"react\";\nimport { ContinentContex } from \"./ContinentContex\";\n\ntype Props = {\n  key: string;\n  language: Language;\n}\n\nexport const LanguageInfo: React.FC<Props> = (props) => {\n  const { key, language } = props;\n  const { isSelectedContinent, setIsSelectedContinent } = useContext(ContinentContex)\n\n  return (\n    <li\n      className=\"list-group-item\"\n      key={key}\n    >\n      <button\n        type=\"button\"\n        className=\"list-group-item list-group-item-action\"\n        onClick={() => {\n          setIsSelectedContinent(!isSelectedContinent);\n        }}\n      >\n        {language.name}\n      </button>\n    </li>\n  )\n}\n","import React, { useState } from \"react\";\nimport { LanguageInfo } from \"./LanguageInfo\";\n\ntype Props = {\n  key: string;\n  country: Country;\n}\n\nexport const CountryInfo: React.FC<Props> = (props) => {\n  const { key, country } = props;\n  const [isSelectedCountry, setIsSelectedCountry] = useState(false);\n\n  const handleClick = () => {\n    setIsSelectedCountry(!isSelectedCountry);\n  };\n\n  return (\n    <li\n      className=\"list-group-item\"\n      key={key}\n    >\n      <button\n        type=\"button\"\n        className=\"list-group-item list-group-item-action\"\n        onClick={handleClick}\n      >\n        {country.name}\n      </button>\n\n      <ul>\n        {isSelectedCountry && (\n          country.languages.map(language => (\n          <LanguageInfo\n            key={language.name}\n            language={language}\n          />\n        )))}\n      </ul>\n    </li>\n  )\n}\n","import React, { useState } from \"react\";\nimport { ContinentContex } from \"./ContinentContex\";\nimport { CountryInfo } from \"./CountryInfo\";\n\ntype Props = {\n  key: string;\n  continent: Continent;\n}\n\nexport const ContinentInfo: React.FC<Props> = (props) => {\n  const { key, continent } = props;\n  const [isSelectedContinent, setIsSelectedContinent] = useState(false);\n\n  const handleClick = () => {\n    setIsSelectedContinent(!isSelectedContinent);\n  };\n  \n  const value = {\n    isSelectedContinent,\n    setIsSelectedContinent,\n  }\n\n  return (\n    <ContinentContex.Provider value={value}>\n      <li\n        className=\"list-group-item\"\n        key={key}\n      >\n        <button\n          type=\"button\"\n          className=\"list-group-item list-group-item-action\"\n          onClick={handleClick}\n        >\n          {continent.name}\n        </button>\n\n        <ul className=\"list-group\">\n          {isSelectedContinent && (\n            continent.countries.map(country => (\n              <CountryInfo\n                key={country.name}\n                country={country}\n              />\n          )))}\n        </ul>\n      </li>\n    </ContinentContex.Provider>\n  )\n}\n","import {\n  ApolloClient,\n  InMemoryCache,\n  gql\n} from \"@apollo/client\";\n\nexport const client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com',\n  cache: new InMemoryCache()\n});\n\nexport const GET_ALL_CONTINENTS = gql`\n  query {\n    continents {\n      name\n      countries {\n        name\n        languages {\n          name\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport './App.css';\nimport { ContinentInfo } from './components/ContinentInfo';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_CONTINENTS } from './api/api';\n\nconst App: React.FC = () => {\n  const { loading, error, data } = useQuery(GET_ALL_CONTINENTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div className=\"App\">\n      <ul className=\"list-group\">\n        {data.continents.map((continent: Continent) => (\n          <ContinentInfo\n            key={continent.name}\n            continent={continent}\n          />\n        ))}\n      </ul>\n\n    </div>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from './api/api';\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}